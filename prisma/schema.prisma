generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Event {
  id           BigInt      @id @default(autoincrement())
  tournamentId String
  name         String
  trialStatus  TrialStatus @default(SCORING)
  highScoring  Boolean     @default(true)
  locked       Boolean     @default(false)
  medals       Int?        @db.SmallInt
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  scores       Score[]
  audited      User[]      @relation("AuditedEvents")
  supervisors  Role[]      @relation("ESEventRoles")
  invites      Invite[]    @relation("InviteEvents")
}

model Role {
  id           BigInt     @id @default(autoincrement())
  userId       String     @db.Uuid
  tournamentId String
  isDirector   Boolean    @default(false)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supEvents    Event[]    @relation("ESEventRoles")

  @@unique([userId, tournamentId])
}

model Score {
  id       BigInt      @id @default(autoincrement())
  teamId   BigInt
  eventId  BigInt
  rawScore Float?
  tier     Int?        @db.SmallInt
  tiebreak Float?      @db.Real
  status   ScoreStatus
  notes    String?
  event    Event       @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team     Team        @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([eventId, teamId])
}

model Team {
  id           BigInt     @id @default(autoincrement())
  tournamentId String
  number       Int        @db.SmallInt
  school       String
  abbreviation String?
  suffix       String?
  city         String?
  state        States
  trackId      BigInt?
  exhibition   Boolean    @default(false)
  penalties    Int?       @db.SmallInt
  scores       Score[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tracks       Track?     @relation(fields: [trackId], references: [id], onUpdate: NoAction)

  @@unique([tournamentId, number])
}

model Tournament {
  id           String           @id
  name         String
  location     String
  state        States
  level        TournamentLevels
  year         Int              @db.SmallInt
  medals       Int              @default(6) @db.SmallInt
  trophies     Int              @default(3) @db.SmallInt
  bids         Int?             @db.SmallInt
  drops        Int?             @db.SmallInt
  shortName    String?
  awardsDate   DateTime         @db.Date
  endDate      DateTime         @db.Date
  nOffset      Int?             @db.SmallInt
  startDate    DateTime         @db.Date
  division     Divisions
  enableTracks Boolean          @default(false)
  events       Event[]
  invites      Invite[]
  roles        Role[]
  teams        Team[]
  tracks       Track[]
}

model Track {
  id           BigInt     @id @default(autoincrement())
  tournamentId String
  name         String
  medals       Int?       @db.SmallInt
  trophies     Int?       @db.SmallInt
  teams        Team[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            String  @id @db.Uuid
  name          String
  roles         Role[]
  auditedEvents Event[] @relation("AuditedEvents")
}

model Invite {
  link         String     @id
  tournamentId String
  email        String?
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  events       Event[]    @relation("InviteEvents")
}

enum ScoreStatus {
  COMPETED
  PARTICIPATION
  NOSHOW
  DISQUALIFICATION
}

enum Divisions {
  A
  B
  C
}

enum TournamentLevels {
  INVITATIONAL
  REGIONAL
  STATE
  NATIONAL
}

enum States {
  AL
  AK
  AZ
  AR
  CA
  nCA
  sCA
  CO
  CT
  DE
  DC
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
  INTERNATIONAL
}

enum TrialStatus {
  SCORING
  TRIAL
  TRIALED
}
